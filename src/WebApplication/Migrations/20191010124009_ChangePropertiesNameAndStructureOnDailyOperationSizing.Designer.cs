// <auto-generated />
using System;
using DanLiris.Admin.Web;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DanLiris.Admin.Web.Migrations
{
    [DbContext(typeof(AppStorageContext))]
    [Migration("20191010124009_ChangePropertiesNameAndStructureOnDailyOperationSizing")]
    partial class ChangePropertiesNameAndStructureOnDailyOperationSizing
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Manufactures.Domain.Beams.ReadModels.BeamReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ContructionId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<double>("EmptyWeight");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("Number")
                        .HasMaxLength(255);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Type")
                        .HasMaxLength(255);

                    b.Property<double?>("YarnLength");

                    b.Property<double?>("YarnStrands");

                    b.HasKey("Identity");

                    b.ToTable("Weaving_BeamDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.Loom.Entities.DailyOperationLoomDetail", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BeamOperatorId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("DailyOperationLoomDocumentId");

                    b.Property<DateTimeOffset>("DateTimeOperation");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsDown");

                    b.Property<bool>("IsUp");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("OperationStatus");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ShiftId");

                    b.Property<string>("WarpOrigin");

                    b.Property<string>("WeftOrigin");

                    b.HasKey("Identity");

                    b.HasIndex("DailyOperationLoomDocumentId");

                    b.ToTable("Weaving_DailyOperationLoomDetails");
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.Loom.ReadModels.DailyOperationLoomReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BeamId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid?>("DailyOperationMonitoringId");

                    b.Property<string>("DailyOperationStatus");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<Guid>("MachineId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<Guid>("OrderId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("UnitId");

                    b.Property<double?>("UsedYarn");

                    b.HasKey("Identity");

                    b.ToTable("Weaving_DailyOperationLoomDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.ReachingTying.Entities.DailyOperationReachingTyingDetail", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("DailyOperationReachingTyingDocumentId");

                    b.Property<DateTimeOffset>("DateTimeMachine");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("MachineStatus");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<Guid>("OperatorDocumentId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ShiftDocumentId");

                    b.Property<int>("YarnStrandsProcessed");

                    b.HasKey("Identity");

                    b.HasIndex("DailyOperationReachingTyingDocumentId");

                    b.ToTable("Weaving_DailyOperationReachingTyingDetails");
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.ReachingTying.ReadModels.DailyOperationReachingTyingReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<Guid?>("MachineDocumentId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("OperationStatus");

                    b.Property<Guid?>("OrderDocumentId");

                    b.Property<string>("ReachingValueObjects");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid?>("SizingBeamId");

                    b.Property<string>("TyingValueObjects");

                    b.HasKey("Identity");

                    b.ToTable("Weaving_DailyOperationReachingTyingDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.Sizing.Entities.DailyOperationSizingBeamProduct", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("CounterFinish");

                    b.Property<double>("CounterStart");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("DailyOperationSizingDocumentId");

                    b.Property<DateTimeOffset>("DateTimeBeamDocument");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("PISMeter");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("SPU");

                    b.Property<Guid>("SizingBeamId");

                    b.Property<string>("SizingBeamStatus");

                    b.Property<double>("WeightBruto");

                    b.Property<double>("WeightNetto");

                    b.Property<double>("WeightTheoritical");

                    b.HasKey("Identity");

                    b.HasIndex("DailyOperationSizingDocumentId");

                    b.ToTable("Weaving_DailyOperationSizingBeamProducts");
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.Sizing.Entities.DailyOperationSizingHistory", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BrokenBeam");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("DailyOperationSizingDocumentId");

                    b.Property<DateTimeOffset>("DateTimeMachine");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Information");

                    b.Property<string>("MachineStatus");

                    b.Property<int>("MachineTroubled");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<Guid>("OperatorDocumentId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ShiftDocumentId");

                    b.Property<string>("SizingBeamNumber");

                    b.HasKey("Identity");

                    b.HasIndex("DailyOperationSizingDocumentId");

                    b.ToTable("Weaving_DailyOperationSizingHistories");
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.Sizing.ReadModels.DailyOperationSizingReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BeamsWarping");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<double>("EmptyWeight");

                    b.Property<Guid?>("MachineDocumentId");

                    b.Property<int?>("MachineSpeed");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double>("NeReal");

                    b.Property<string>("OperationStatus");

                    b.Property<Guid?>("OrderDocumentId");

                    b.Property<string>("RecipeCode");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("TexSQ");

                    b.Property<string>("Visco");

                    b.Property<double>("YarnStrands");

                    b.HasKey("Identity");

                    b.ToTable("Weaving_DailyOperationSizingDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.Warping.Entities.DailyOperationWarpingBeamProduct", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BeamStatus");

                    b.Property<int?>("BrokenThreadsCause");

                    b.Property<int?>("ConeDeficient");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("DailyOperationWarpingDocumentId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<DateTimeOffset>("LatestDateTimeBeamProduct");

                    b.Property<int?>("LeftLooseCreel");

                    b.Property<int?>("LooseThreadsAmount");

                    b.Property<int?>("MachineSpeed");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<double?>("PressRoll");

                    b.Property<int?>("RightLooseCreel");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("Tention");

                    b.Property<Guid>("WarpingBeamId");

                    b.Property<double?>("WarpingBeamLength");

                    b.Property<int?>("WarpingBeamLengthUOMId");

                    b.HasKey("Identity");

                    b.HasIndex("DailyOperationWarpingDocumentId");

                    b.ToTable("Weaving_DailyOperationWarpingBeamProducts");
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.Warping.Entities.DailyOperationWarpingHistory", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("DailyOperationWarpingDocumentId");

                    b.Property<DateTimeOffset>("DateTimeMachine");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Information");

                    b.Property<string>("MachineStatus");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<Guid>("OperatorDocumentId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<Guid>("ShiftDocumentId");

                    b.Property<string>("WarpingBeamNumber");

                    b.HasKey("Identity");

                    b.HasIndex("DailyOperationWarpingDocumentId");

                    b.ToTable("Weaving_DailyOperationWarpingHistories");
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.Warping.ReadModels.DailyOperationWarpingReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AmountOfCones");

                    b.Property<string>("ColourOfCone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<DateTimeOffset>("DateTimeOperation");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<Guid>("MaterialTypeId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("OperationStatus");

                    b.Property<Guid>("OrderDocumentId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Identity");

                    b.ToTable("Weaving_DailyOperationWarpingDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.Defects.FabricDefect.ReadModels.FabricDefectReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<string>("DefectCategory")
                        .HasMaxLength(255);

                    b.Property<string>("DefectCode")
                        .HasMaxLength(255);

                    b.Property<string>("DefectType")
                        .HasMaxLength(255);

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Identity");

                    b.ToTable("Weaving_FabricDefectDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.Estimations.Productions.Entities.EstimationProduct", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<Guid>("EstimatedProductionDocumentId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("OrderDocument")
                        .HasMaxLength(2000);

                    b.Property<string>("ProductGrade")
                        .HasMaxLength(2000);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("TotalGramEstimation");

                    b.HasKey("Identity");

                    b.HasIndex("EstimatedProductionDocumentId");

                    b.ToTable("Weaving_EstimationDetails");
                });

            modelBuilder.Entity("Manufactures.Domain.Estimations.Productions.ReadModels.EstimatedProductionDocumentReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("EstimatedNumber");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("Period")
                        .HasMaxLength(255);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UnitId");

                    b.HasKey("Identity");

                    b.ToTable("Weaving_EstimationProductDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.FabricConstructions.ReadModels.FabricConstructionReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AmountOfWarp");

                    b.Property<int>("AmountOfWeft");

                    b.Property<string>("ConstructionNumber")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ListOfWarp")
                        .HasMaxLength(20000);

                    b.Property<string>("ListOfWeft")
                        .HasMaxLength(20000);

                    b.Property<string>("MaterialTypeName");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<int?>("ReedSpace");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("TotalEnds");

                    b.Property<double>("TotalYarn");

                    b.Property<string>("WarpType")
                        .HasMaxLength(255);

                    b.Property<string>("WeftType")
                        .HasMaxLength(255);

                    b.Property<int>("Width");

                    b.Property<string>("WovenType")
                        .HasMaxLength(255);

                    b.HasKey("Identity");

                    b.ToTable("Weaving_ConstructionDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.Machines.ReadModels.MachineDocumentReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Location")
                        .HasMaxLength(255);

                    b.Property<string>("MachineNumber")
                        .HasMaxLength(255);

                    b.Property<Guid?>("MachineTypeId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("WeavingUnitId");

                    b.HasKey("Identity");

                    b.ToTable("Weaving_MachineDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.MachinesPlanning.ReadModels.MachinesPlanningReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area")
                        .HasMaxLength(255);

                    b.Property<string>("Blok")
                        .HasMaxLength(255);

                    b.Property<string>("BlokKaizen")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<Guid?>("MachineId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UnitDepartementId");

                    b.Property<string>("UserMaintenanceId");

                    b.Property<string>("UserOperatorId");

                    b.HasKey("Identity");

                    b.ToTable("Weaving_MachinesPlanningDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.MachineTypes.ReadModels.MachineTypeReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("MachineUnit")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("Speed");

                    b.Property<string>("TypeName")
                        .HasMaxLength(255);

                    b.HasKey("Identity");

                    b.ToTable("Weaving_MachineTypeDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.Materials.ReadModels.MaterialTypeReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<string>("RingDocuments");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Identity");

                    b.ToTable("Weaving_MaterialTypeDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.Movements.ReadModels.MovementReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("DailyOperationId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("MovementType");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Identity");

                    b.ToTable("Weaving_MovementDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.Operators.ReadModels.OperatorReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Assignment")
                        .HasMaxLength(255);

                    b.Property<string>("CoreAccount");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Group")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Type")
                        .HasMaxLength(255);

                    b.Property<int?>("UnitId");

                    b.HasKey("Identity");

                    b.ToTable("Weaving_OperatorDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.Orders.ReadModels.OrderDocumentReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ConstructionId")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<DateTimeOffset>("DateOrdered");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("OrderNumber");

                    b.Property<string>("OrderStatus")
                        .HasMaxLength(255);

                    b.Property<string>("Period")
                        .HasMaxLength(255);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("UnitId");

                    b.Property<string>("WarpComposition")
                        .HasMaxLength(255);

                    b.Property<string>("WarpOrigin");

                    b.Property<string>("WeftComposition")
                        .HasMaxLength(255);

                    b.Property<string>("WeftOrigin");

                    b.Property<int>("WholeGrade");

                    b.Property<string>("YarnType");

                    b.HasKey("Identity");

                    b.ToTable("Weaving_OrderDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.Shifts.ReadModels.ShiftReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<TimeSpan>("StartTime");

                    b.HasKey("Identity");

                    b.ToTable("Weaving_ShiftDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.StockCard.ReadModels.StockCardReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BeamDocument");

                    b.Property<Guid>("BeamId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<Guid>("DailyOperationId");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<bool>("Expired");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("StockNumber");

                    b.Property<string>("StockStatus");

                    b.HasKey("Identity");

                    b.ToTable("Weaving_StockCardDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.Suppliers.ReadModels.WeavingSupplierDocumentReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(255);

                    b.Property<string>("CoreSupplierId");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Identity");

                    b.ToTable("Weaving_SupplierDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.YarnNumbers.ReadModels.YarnNumberDocumentReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AdditionalNumber");

                    b.Property<string>("Code")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<int>("Number")
                        .HasMaxLength(255);

                    b.Property<string>("RingType");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Identity");

                    b.ToTable("Weaving_YarnNumberDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.Yarns.ReadModels.YarnDocumentReadModel", b =>
                {
                    b.Property<Guid>("Identity")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .HasMaxLength(255);

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset>("CreatedDate");

                    b.Property<bool?>("Deleted");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("DeletedDate");

                    b.Property<Guid?>("MaterialTypeId");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(32);

                    b.Property<DateTimeOffset?>("ModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Tags")
                        .HasMaxLength(255);

                    b.Property<Guid?>("YarnNumberId");

                    b.HasKey("Identity");

                    b.ToTable("Weaving_YarnDocuments");
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.Loom.Entities.DailyOperationLoomDetail", b =>
                {
                    b.HasOne("Manufactures.Domain.DailyOperations.Loom.ReadModels.DailyOperationLoomReadModel", "DailyOperationLoomDocument")
                        .WithMany("DailyOperationLoomDetails")
                        .HasForeignKey("DailyOperationLoomDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.ReachingTying.Entities.DailyOperationReachingTyingDetail", b =>
                {
                    b.HasOne("Manufactures.Domain.DailyOperations.ReachingTying.ReadModels.DailyOperationReachingTyingReadModel", "DailyOperationReachingTyingDocument")
                        .WithMany("ReachingTyingDetails")
                        .HasForeignKey("DailyOperationReachingTyingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.Sizing.Entities.DailyOperationSizingBeamProduct", b =>
                {
                    b.HasOne("Manufactures.Domain.DailyOperations.Sizing.ReadModels.DailyOperationSizingReadModel", "DailyOperationSizingDocument")
                        .WithMany("SizingBeamProducts")
                        .HasForeignKey("DailyOperationSizingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.Sizing.Entities.DailyOperationSizingHistory", b =>
                {
                    b.HasOne("Manufactures.Domain.DailyOperations.Sizing.ReadModels.DailyOperationSizingReadModel", "DailyOperationSizingDocument")
                        .WithMany("SizingHistories")
                        .HasForeignKey("DailyOperationSizingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.Warping.Entities.DailyOperationWarpingBeamProduct", b =>
                {
                    b.HasOne("Manufactures.Domain.DailyOperations.Warping.ReadModels.DailyOperationWarpingReadModel", "DailyOperationWarpingDocument")
                        .WithMany("WarpingBeamProducts")
                        .HasForeignKey("DailyOperationWarpingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.DailyOperations.Warping.Entities.DailyOperationWarpingHistory", b =>
                {
                    b.HasOne("Manufactures.Domain.DailyOperations.Warping.ReadModels.DailyOperationWarpingReadModel", "DailyOperationWarpingDocument")
                        .WithMany("WarpingHistories")
                        .HasForeignKey("DailyOperationWarpingDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Manufactures.Domain.Estimations.Productions.Entities.EstimationProduct", b =>
                {
                    b.HasOne("Manufactures.Domain.Estimations.Productions.ReadModels.EstimatedProductionDocumentReadModel", "EstimatedProductionDocument")
                        .WithMany("EstimationProducts")
                        .HasForeignKey("EstimatedProductionDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
